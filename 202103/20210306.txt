ES6からコンストラクタ関数をクラス表記にできるようになった
現段階ではクラス表記がメインで使用する
コンストラクタ内でsueprをプロパティとして呼ぶ際は一番上に記述する
Superに関してはオブジェクトリテラル内でも使用可能だが、大半はクラス内で使用されるので、まずはクラス内でしっかり使えるようにするのが良さそう。
簡単にサブスクリプションサービスに参加できるプラットフォーム
シンボルは一意の値を設定するために使用する
プログラマーは通常は使用しないが、jsエンジンの実装者が既存のコードを破壊することなく、新しいprototypeなどを実装する際に使用する。
覚えておく程度でいいかもしれない
それぞれのプロパティにはvalue(一般的に想像できる使い方)とconfigurableとenumerableとwritableを設定することができ、これらをまとめてディスクリプターと呼ぶ。
value=値
configurable = ディスクリプター全体の設定の変更が可能かどうか
enumerable = 列挙可能性
writable = 値の変更が可能かどうか
defineProperty(ObjectのメソッドなのでObject.defineProperty(対象のオブジェクト, ‘プロパティ名’, {setとget})と使用する)で何も設定しなければデフォルトでconfigurableとenumerableとwritableがfalseのオブジェクトが生成される
writableの際にはvalueの再代入をしても再代入自体は反映されないがエラーは発生しないので’use strict’を記述することでエラーを発生させることができる。

ディスクリプターには上記の4つの他にsetとgetを指定できるがデフォルトではundefinedとなる。
definePropertyに望む効果はclassを用いることでより簡単に実装可能。
Class Person{
  constructor(name){     this._name = name;
  }
  get name(){
    return this.name;
  } 

  set name(val){     this._name = name;
  }
}
getとsetはそれぞれ呼ばれた時と値を格納する際の処理を指定することができる。
インスタンス化を行わずに使用可能のメソッドをstaricメソッドや静的メソッドと呼ぶ、Rubyでいうクラスメソッド的な？
クラス.メソッド名 = 関数でも同じ結果になるが、まとめて記述した方が可読性が高くなると思うので、基本的にはstaticを使用した方が良さそう。
setTimeoutの第一引数は関数として実行されるためオブジェクトからの呼び出しとはならないので注意
bindでメソッドのthisを指定する方法を忘れていた反省
