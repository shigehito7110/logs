Jsの実行環境環境にはjavascriptエンジンが存在し、代表的なものはv8
Jsはweb apisを通してブラウザを操作する
Javascriptエンジンによってグローバルオブジェクトが定義されている
代表的なグローバルオブジェクトはブラウザ上のwindowでありその中に様々なweb apisが定義されている(documentなど)
Js実行前にグローバルオブジェクト(ブラウザの場合はwondow)とthis(コンテキストによって参照が変わる)が用意される
実行コンテキストとはコードを実行する環境や状況
コード + グローバルオブジェクト + this
グローバルコンテキスト(グローバルオプジェクトとthis) rubyでいうトップレベルで定義されているイメージ？
関数コンテキスト(thisとargumentsと外部変数とsuper) rubyでいうメソッド内で使用できるイメージ？
コールスタックはコンテキストの積み重ね
コールスタックの一番上が実行中のコンテキスト
コールスタックを使用してjsの実行経緯を遡ることができる。
varを使用した場合はJavascriptエンジンは変数の宣言を発見したらメモリを確保し、undefiedという値を入れている
letとconstの場合はundefinedの初期化は行われない
上記の使用はホイステイング
コンテキストができたらホイスティングが走る
ブラウザによってはjsエンジンによって挙動が変わる点に注意して開発する
Varとfunctionで定義した場合はグローバルオブジェクト(windowオブジェクト)のプロパティとして定義される
グローバルオブジェクトは省略可能
Window.aとかやる必要はない
Javascriptはグローバルスコープ===window
この仕様のためグローバルスコープとスクリプトスコープに使い勝手に違いがなくまとめてグローバルスコープと呼ばれることもある

ブロックスコープ内ではletかconstを使用する
ブロックスコープ内でvarまたはfunctionを使用するとスコープを無視するので使用しない方が良い

レキシカルとはソースコードのどこに何を書いているかという意味合い
レキシカルスコープとはコードを書く場所によって参照可能な変数が変わるスコープのこと

グローバルスコープはスクリプトスコープの外側
レキシカルスコープの変数に対する参照を保持している状態をクロージャーという

function a(){
  let b = 1;
  function	c(){
    console.log(b);
  }
} 
上のような状態をクロージャー
