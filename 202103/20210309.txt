スレッドは処理の流れであり、jsはメインスレッドの上で実行される。
メインスレッドにはjavascriptの実行とレンダリング(画面方への反映)を行う
1秒あたりの画面更新頻度をfpsという。60fps以内に抑えると良い

同期処理はメインスレッドでコードが順番に実行される=> 一つの処理が終了するまでは次の処理は実行されない
非同期処理は一時的にメインスレッドから処理が切り離される=> その時間に空きができメインスレッドで別の処理が実行される。

実行待ちの非同期処理をまとめてタスクキュー(マクロタスクとも呼ぶ)これとは月にマイクロキュー(ジョブキュー)もある
コールスタックにコンテキストがある状態ではタスクキューのタスクは実行されない
コールスタックがからになった状態でイベントループがタスクキューにコールスタックが空いたことを知らせfirst in  first outに則ってタスクキュー内のタスクがコールスタックに渡される。

コールバック関数の非同期処理をより簡潔に書けるようにするためにpromiseを使用する
promiseにはresolveとrejectが渡され、resolveの場合はthenとfinallyが呼ばれ、rejectの場合はcatchとfinallyが呼ばれる
reactでthenとcatchは使用したことがあった。
これらの三つの処理は非同期で実行される。new Promiseの引数のコールバック関数は同期的に処理される。
finallyには引数を取ることができない
可読性を考慮し、非同期処理のコールバック関数にはpromiseを使用するのが良さげ
thenメソッド内でpromiseチェーンを繋ぐ場合はコールバック関数内でpromiseのインスタンスをreturnする必要がある。
allSettledはすべての非同期処理をとりあえず実行する=> すべてthenしか処理されない
マイクロタスクの方がマクロタスクよりも先に実行される
マイクロタスクはイベントループの順番が来たときに格納されているすべてまとめてジョブを実行する
マクロタスクは一つづつ実行する
マクロタスク => setTimeoutなど
マイクロタスク=> Promiseなど
 Promiseを直感的に記述するための記法をawaitとasyncと呼ぶ
Asyncでpromiseをとる関数を定義し、Asyncの中でawaitと使用しpromiseのインスタンスを返す関数を扱う

Jsの例外処理　try catch finally => rubyのbegin~endと同じ感じ
catchブロックがないとthrowで投げた処理で止まってしまうので、そのあとが処理されなくなる

